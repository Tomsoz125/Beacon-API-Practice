
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model BeaconUser
 * 
 */
export type BeaconUser = $Result.DefaultSelection<Prisma.$BeaconUserPayload>
/**
 * Model AccessToken
 * 
 */
export type AccessToken = $Result.DefaultSelection<Prisma.$AccessTokenPayload>
/**
 * Model CodeChallenge
 * 
 */
export type CodeChallenge = $Result.DefaultSelection<Prisma.$CodeChallengePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more BeaconUsers
 * const beaconUsers = await prisma.beaconUser.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more BeaconUsers
   * const beaconUsers = await prisma.beaconUser.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.beaconUser`: Exposes CRUD operations for the **BeaconUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BeaconUsers
    * const beaconUsers = await prisma.beaconUser.findMany()
    * ```
    */
  get beaconUser(): Prisma.BeaconUserDelegate<ExtArgs>;

  /**
   * `prisma.accessToken`: Exposes CRUD operations for the **AccessToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AccessTokens
    * const accessTokens = await prisma.accessToken.findMany()
    * ```
    */
  get accessToken(): Prisma.AccessTokenDelegate<ExtArgs>;

  /**
   * `prisma.codeChallenge`: Exposes CRUD operations for the **CodeChallenge** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CodeChallenges
    * const codeChallenges = await prisma.codeChallenge.findMany()
    * ```
    */
  get codeChallenge(): Prisma.CodeChallengeDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    BeaconUser: 'BeaconUser',
    AccessToken: 'AccessToken',
    CodeChallenge: 'CodeChallenge'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "beaconUser" | "accessToken" | "codeChallenge"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      BeaconUser: {
        payload: Prisma.$BeaconUserPayload<ExtArgs>
        fields: Prisma.BeaconUserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BeaconUserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BeaconUserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          findFirst: {
            args: Prisma.BeaconUserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BeaconUserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          findMany: {
            args: Prisma.BeaconUserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>[]
          }
          create: {
            args: Prisma.BeaconUserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          createMany: {
            args: Prisma.BeaconUserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.BeaconUserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          update: {
            args: Prisma.BeaconUserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          deleteMany: {
            args: Prisma.BeaconUserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BeaconUserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BeaconUserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BeaconUserPayload>
          }
          aggregate: {
            args: Prisma.BeaconUserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBeaconUser>
          }
          groupBy: {
            args: Prisma.BeaconUserGroupByArgs<ExtArgs>
            result: $Utils.Optional<BeaconUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.BeaconUserCountArgs<ExtArgs>
            result: $Utils.Optional<BeaconUserCountAggregateOutputType> | number
          }
        }
      }
      AccessToken: {
        payload: Prisma.$AccessTokenPayload<ExtArgs>
        fields: Prisma.AccessTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccessTokenFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccessTokenFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          findFirst: {
            args: Prisma.AccessTokenFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccessTokenFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          findMany: {
            args: Prisma.AccessTokenFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>[]
          }
          create: {
            args: Prisma.AccessTokenCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          createMany: {
            args: Prisma.AccessTokenCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.AccessTokenDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          update: {
            args: Prisma.AccessTokenUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          deleteMany: {
            args: Prisma.AccessTokenDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AccessTokenUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AccessTokenUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AccessTokenPayload>
          }
          aggregate: {
            args: Prisma.AccessTokenAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAccessToken>
          }
          groupBy: {
            args: Prisma.AccessTokenGroupByArgs<ExtArgs>
            result: $Utils.Optional<AccessTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccessTokenCountArgs<ExtArgs>
            result: $Utils.Optional<AccessTokenCountAggregateOutputType> | number
          }
        }
      }
      CodeChallenge: {
        payload: Prisma.$CodeChallengePayload<ExtArgs>
        fields: Prisma.CodeChallengeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CodeChallengeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CodeChallengeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          findFirst: {
            args: Prisma.CodeChallengeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CodeChallengeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          findMany: {
            args: Prisma.CodeChallengeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>[]
          }
          create: {
            args: Prisma.CodeChallengeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          createMany: {
            args: Prisma.CodeChallengeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CodeChallengeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          update: {
            args: Prisma.CodeChallengeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          deleteMany: {
            args: Prisma.CodeChallengeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CodeChallengeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CodeChallengeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CodeChallengePayload>
          }
          aggregate: {
            args: Prisma.CodeChallengeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCodeChallenge>
          }
          groupBy: {
            args: Prisma.CodeChallengeGroupByArgs<ExtArgs>
            result: $Utils.Optional<CodeChallengeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CodeChallengeCountArgs<ExtArgs>
            result: $Utils.Optional<CodeChallengeCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model BeaconUser
   */

  export type AggregateBeaconUser = {
    _count: BeaconUserCountAggregateOutputType | null
    _avg: BeaconUserAvgAggregateOutputType | null
    _sum: BeaconUserSumAggregateOutputType | null
    _min: BeaconUserMinAggregateOutputType | null
    _max: BeaconUserMaxAggregateOutputType | null
  }

  export type BeaconUserAvgAggregateOutputType = {
    accessTokenId: number | null
  }

  export type BeaconUserSumAggregateOutputType = {
    accessTokenId: number | null
  }

  export type BeaconUserMinAggregateOutputType = {
    userId: string | null
    username: string | null
    usernameFull: string | null
    isAnonymous: boolean | null
    publicKey: string | null
    cloudKey: string | null
    banned: boolean | null
    accessTokenId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BeaconUserMaxAggregateOutputType = {
    userId: string | null
    username: string | null
    usernameFull: string | null
    isAnonymous: boolean | null
    publicKey: string | null
    cloudKey: string | null
    banned: boolean | null
    accessTokenId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BeaconUserCountAggregateOutputType = {
    userId: number
    username: number
    usernameFull: number
    isAnonymous: number
    publicKey: number
    privateKey: number
    cloudKey: number
    banned: number
    accessTokenId: number
    guildIds: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BeaconUserAvgAggregateInputType = {
    accessTokenId?: true
  }

  export type BeaconUserSumAggregateInputType = {
    accessTokenId?: true
  }

  export type BeaconUserMinAggregateInputType = {
    userId?: true
    username?: true
    usernameFull?: true
    isAnonymous?: true
    publicKey?: true
    cloudKey?: true
    banned?: true
    accessTokenId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BeaconUserMaxAggregateInputType = {
    userId?: true
    username?: true
    usernameFull?: true
    isAnonymous?: true
    publicKey?: true
    cloudKey?: true
    banned?: true
    accessTokenId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BeaconUserCountAggregateInputType = {
    userId?: true
    username?: true
    usernameFull?: true
    isAnonymous?: true
    publicKey?: true
    privateKey?: true
    cloudKey?: true
    banned?: true
    accessTokenId?: true
    guildIds?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BeaconUserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BeaconUser to aggregate.
     */
    where?: BeaconUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeaconUsers to fetch.
     */
    orderBy?: BeaconUserOrderByWithRelationInput | BeaconUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BeaconUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeaconUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeaconUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BeaconUsers
    **/
    _count?: true | BeaconUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BeaconUserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BeaconUserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeaconUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeaconUserMaxAggregateInputType
  }

  export type GetBeaconUserAggregateType<T extends BeaconUserAggregateArgs> = {
        [P in keyof T & keyof AggregateBeaconUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeaconUser[P]>
      : GetScalarType<T[P], AggregateBeaconUser[P]>
  }




  export type BeaconUserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeaconUserWhereInput
    orderBy?: BeaconUserOrderByWithAggregationInput | BeaconUserOrderByWithAggregationInput[]
    by: BeaconUserScalarFieldEnum[] | BeaconUserScalarFieldEnum
    having?: BeaconUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeaconUserCountAggregateInputType | true
    _avg?: BeaconUserAvgAggregateInputType
    _sum?: BeaconUserSumAggregateInputType
    _min?: BeaconUserMinAggregateInputType
    _max?: BeaconUserMaxAggregateInputType
  }

  export type BeaconUserGroupByOutputType = {
    userId: string
    username: string
    usernameFull: string
    isAnonymous: boolean
    publicKey: string
    privateKey: JsonValue
    cloudKey: string
    banned: boolean
    accessTokenId: number
    guildIds: JsonValue
    createdAt: Date
    updatedAt: Date
    _count: BeaconUserCountAggregateOutputType | null
    _avg: BeaconUserAvgAggregateOutputType | null
    _sum: BeaconUserSumAggregateOutputType | null
    _min: BeaconUserMinAggregateOutputType | null
    _max: BeaconUserMaxAggregateOutputType | null
  }

  type GetBeaconUserGroupByPayload<T extends BeaconUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeaconUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeaconUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeaconUserGroupByOutputType[P]>
            : GetScalarType<T[P], BeaconUserGroupByOutputType[P]>
        }
      >
    >


  export type BeaconUserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    username?: boolean
    usernameFull?: boolean
    isAnonymous?: boolean
    publicKey?: boolean
    privateKey?: boolean
    cloudKey?: boolean
    banned?: boolean
    accessTokenId?: boolean
    guildIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["beaconUser"]>


  export type BeaconUserSelectScalar = {
    userId?: boolean
    username?: boolean
    usernameFull?: boolean
    isAnonymous?: boolean
    publicKey?: boolean
    privateKey?: boolean
    cloudKey?: boolean
    banned?: boolean
    accessTokenId?: boolean
    guildIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $BeaconUserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BeaconUser"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      username: string
      usernameFull: string
      isAnonymous: boolean
      publicKey: string
      privateKey: Prisma.JsonValue
      cloudKey: string
      banned: boolean
      accessTokenId: number
      guildIds: Prisma.JsonValue
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["beaconUser"]>
    composites: {}
  }

  type BeaconUserGetPayload<S extends boolean | null | undefined | BeaconUserDefaultArgs> = $Result.GetResult<Prisma.$BeaconUserPayload, S>

  type BeaconUserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BeaconUserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BeaconUserCountAggregateInputType | true
    }

  export interface BeaconUserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BeaconUser'], meta: { name: 'BeaconUser' } }
    /**
     * Find zero or one BeaconUser that matches the filter.
     * @param {BeaconUserFindUniqueArgs} args - Arguments to find a BeaconUser
     * @example
     * // Get one BeaconUser
     * const beaconUser = await prisma.beaconUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BeaconUserFindUniqueArgs>(args: SelectSubset<T, BeaconUserFindUniqueArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BeaconUser that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BeaconUserFindUniqueOrThrowArgs} args - Arguments to find a BeaconUser
     * @example
     * // Get one BeaconUser
     * const beaconUser = await prisma.beaconUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BeaconUserFindUniqueOrThrowArgs>(args: SelectSubset<T, BeaconUserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BeaconUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserFindFirstArgs} args - Arguments to find a BeaconUser
     * @example
     * // Get one BeaconUser
     * const beaconUser = await prisma.beaconUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BeaconUserFindFirstArgs>(args?: SelectSubset<T, BeaconUserFindFirstArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BeaconUser that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserFindFirstOrThrowArgs} args - Arguments to find a BeaconUser
     * @example
     * // Get one BeaconUser
     * const beaconUser = await prisma.beaconUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BeaconUserFindFirstOrThrowArgs>(args?: SelectSubset<T, BeaconUserFindFirstOrThrowArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BeaconUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BeaconUsers
     * const beaconUsers = await prisma.beaconUser.findMany()
     * 
     * // Get first 10 BeaconUsers
     * const beaconUsers = await prisma.beaconUser.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const beaconUserWithUserIdOnly = await prisma.beaconUser.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends BeaconUserFindManyArgs>(args?: SelectSubset<T, BeaconUserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BeaconUser.
     * @param {BeaconUserCreateArgs} args - Arguments to create a BeaconUser.
     * @example
     * // Create one BeaconUser
     * const BeaconUser = await prisma.beaconUser.create({
     *   data: {
     *     // ... data to create a BeaconUser
     *   }
     * })
     * 
     */
    create<T extends BeaconUserCreateArgs>(args: SelectSubset<T, BeaconUserCreateArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BeaconUsers.
     * @param {BeaconUserCreateManyArgs} args - Arguments to create many BeaconUsers.
     * @example
     * // Create many BeaconUsers
     * const beaconUser = await prisma.beaconUser.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BeaconUserCreateManyArgs>(args?: SelectSubset<T, BeaconUserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BeaconUser.
     * @param {BeaconUserDeleteArgs} args - Arguments to delete one BeaconUser.
     * @example
     * // Delete one BeaconUser
     * const BeaconUser = await prisma.beaconUser.delete({
     *   where: {
     *     // ... filter to delete one BeaconUser
     *   }
     * })
     * 
     */
    delete<T extends BeaconUserDeleteArgs>(args: SelectSubset<T, BeaconUserDeleteArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BeaconUser.
     * @param {BeaconUserUpdateArgs} args - Arguments to update one BeaconUser.
     * @example
     * // Update one BeaconUser
     * const beaconUser = await prisma.beaconUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BeaconUserUpdateArgs>(args: SelectSubset<T, BeaconUserUpdateArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BeaconUsers.
     * @param {BeaconUserDeleteManyArgs} args - Arguments to filter BeaconUsers to delete.
     * @example
     * // Delete a few BeaconUsers
     * const { count } = await prisma.beaconUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BeaconUserDeleteManyArgs>(args?: SelectSubset<T, BeaconUserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BeaconUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BeaconUsers
     * const beaconUser = await prisma.beaconUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BeaconUserUpdateManyArgs>(args: SelectSubset<T, BeaconUserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BeaconUser.
     * @param {BeaconUserUpsertArgs} args - Arguments to update or create a BeaconUser.
     * @example
     * // Update or create a BeaconUser
     * const beaconUser = await prisma.beaconUser.upsert({
     *   create: {
     *     // ... data to create a BeaconUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BeaconUser we want to update
     *   }
     * })
     */
    upsert<T extends BeaconUserUpsertArgs>(args: SelectSubset<T, BeaconUserUpsertArgs<ExtArgs>>): Prisma__BeaconUserClient<$Result.GetResult<Prisma.$BeaconUserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BeaconUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserCountArgs} args - Arguments to filter BeaconUsers to count.
     * @example
     * // Count the number of BeaconUsers
     * const count = await prisma.beaconUser.count({
     *   where: {
     *     // ... the filter for the BeaconUsers we want to count
     *   }
     * })
    **/
    count<T extends BeaconUserCountArgs>(
      args?: Subset<T, BeaconUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeaconUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BeaconUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeaconUserAggregateArgs>(args: Subset<T, BeaconUserAggregateArgs>): Prisma.PrismaPromise<GetBeaconUserAggregateType<T>>

    /**
     * Group by BeaconUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeaconUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BeaconUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BeaconUserGroupByArgs['orderBy'] }
        : { orderBy?: BeaconUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BeaconUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeaconUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BeaconUser model
   */
  readonly fields: BeaconUserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BeaconUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BeaconUserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BeaconUser model
   */ 
  interface BeaconUserFieldRefs {
    readonly userId: FieldRef<"BeaconUser", 'String'>
    readonly username: FieldRef<"BeaconUser", 'String'>
    readonly usernameFull: FieldRef<"BeaconUser", 'String'>
    readonly isAnonymous: FieldRef<"BeaconUser", 'Boolean'>
    readonly publicKey: FieldRef<"BeaconUser", 'String'>
    readonly privateKey: FieldRef<"BeaconUser", 'Json'>
    readonly cloudKey: FieldRef<"BeaconUser", 'String'>
    readonly banned: FieldRef<"BeaconUser", 'Boolean'>
    readonly accessTokenId: FieldRef<"BeaconUser", 'Int'>
    readonly guildIds: FieldRef<"BeaconUser", 'Json'>
    readonly createdAt: FieldRef<"BeaconUser", 'DateTime'>
    readonly updatedAt: FieldRef<"BeaconUser", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BeaconUser findUnique
   */
  export type BeaconUserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter, which BeaconUser to fetch.
     */
    where: BeaconUserWhereUniqueInput
  }

  /**
   * BeaconUser findUniqueOrThrow
   */
  export type BeaconUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter, which BeaconUser to fetch.
     */
    where: BeaconUserWhereUniqueInput
  }

  /**
   * BeaconUser findFirst
   */
  export type BeaconUserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter, which BeaconUser to fetch.
     */
    where?: BeaconUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeaconUsers to fetch.
     */
    orderBy?: BeaconUserOrderByWithRelationInput | BeaconUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BeaconUsers.
     */
    cursor?: BeaconUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeaconUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeaconUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BeaconUsers.
     */
    distinct?: BeaconUserScalarFieldEnum | BeaconUserScalarFieldEnum[]
  }

  /**
   * BeaconUser findFirstOrThrow
   */
  export type BeaconUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter, which BeaconUser to fetch.
     */
    where?: BeaconUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeaconUsers to fetch.
     */
    orderBy?: BeaconUserOrderByWithRelationInput | BeaconUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BeaconUsers.
     */
    cursor?: BeaconUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeaconUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeaconUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BeaconUsers.
     */
    distinct?: BeaconUserScalarFieldEnum | BeaconUserScalarFieldEnum[]
  }

  /**
   * BeaconUser findMany
   */
  export type BeaconUserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter, which BeaconUsers to fetch.
     */
    where?: BeaconUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeaconUsers to fetch.
     */
    orderBy?: BeaconUserOrderByWithRelationInput | BeaconUserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BeaconUsers.
     */
    cursor?: BeaconUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeaconUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeaconUsers.
     */
    skip?: number
    distinct?: BeaconUserScalarFieldEnum | BeaconUserScalarFieldEnum[]
  }

  /**
   * BeaconUser create
   */
  export type BeaconUserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * The data needed to create a BeaconUser.
     */
    data: XOR<BeaconUserCreateInput, BeaconUserUncheckedCreateInput>
  }

  /**
   * BeaconUser createMany
   */
  export type BeaconUserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BeaconUsers.
     */
    data: BeaconUserCreateManyInput | BeaconUserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BeaconUser update
   */
  export type BeaconUserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * The data needed to update a BeaconUser.
     */
    data: XOR<BeaconUserUpdateInput, BeaconUserUncheckedUpdateInput>
    /**
     * Choose, which BeaconUser to update.
     */
    where: BeaconUserWhereUniqueInput
  }

  /**
   * BeaconUser updateMany
   */
  export type BeaconUserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BeaconUsers.
     */
    data: XOR<BeaconUserUpdateManyMutationInput, BeaconUserUncheckedUpdateManyInput>
    /**
     * Filter which BeaconUsers to update
     */
    where?: BeaconUserWhereInput
  }

  /**
   * BeaconUser upsert
   */
  export type BeaconUserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * The filter to search for the BeaconUser to update in case it exists.
     */
    where: BeaconUserWhereUniqueInput
    /**
     * In case the BeaconUser found by the `where` argument doesn't exist, create a new BeaconUser with this data.
     */
    create: XOR<BeaconUserCreateInput, BeaconUserUncheckedCreateInput>
    /**
     * In case the BeaconUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BeaconUserUpdateInput, BeaconUserUncheckedUpdateInput>
  }

  /**
   * BeaconUser delete
   */
  export type BeaconUserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
    /**
     * Filter which BeaconUser to delete.
     */
    where: BeaconUserWhereUniqueInput
  }

  /**
   * BeaconUser deleteMany
   */
  export type BeaconUserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BeaconUsers to delete
     */
    where?: BeaconUserWhereInput
  }

  /**
   * BeaconUser without action
   */
  export type BeaconUserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeaconUser
     */
    select?: BeaconUserSelect<ExtArgs> | null
  }


  /**
   * Model AccessToken
   */

  export type AggregateAccessToken = {
    _count: AccessTokenCountAggregateOutputType | null
    _avg: AccessTokenAvgAggregateOutputType | null
    _sum: AccessTokenSumAggregateOutputType | null
    _min: AccessTokenMinAggregateOutputType | null
    _max: AccessTokenMaxAggregateOutputType | null
  }

  export type AccessTokenAvgAggregateOutputType = {
    id: number | null
  }

  export type AccessTokenSumAggregateOutputType = {
    id: number | null
  }

  export type AccessTokenMinAggregateOutputType = {
    id: number | null
    userId: string | null
    tokenType: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpires: Date | null
    refreshTokenExpires: Date | null
    scope: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccessTokenMaxAggregateOutputType = {
    id: number | null
    userId: string | null
    tokenType: string | null
    accessToken: string | null
    refreshToken: string | null
    accessTokenExpires: Date | null
    refreshTokenExpires: Date | null
    scope: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccessTokenCountAggregateOutputType = {
    id: number
    userId: number
    tokenType: number
    accessToken: number
    refreshToken: number
    accessTokenExpires: number
    refreshTokenExpires: number
    scope: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccessTokenAvgAggregateInputType = {
    id?: true
  }

  export type AccessTokenSumAggregateInputType = {
    id?: true
  }

  export type AccessTokenMinAggregateInputType = {
    id?: true
    userId?: true
    tokenType?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpires?: true
    refreshTokenExpires?: true
    scope?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccessTokenMaxAggregateInputType = {
    id?: true
    userId?: true
    tokenType?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpires?: true
    refreshTokenExpires?: true
    scope?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccessTokenCountAggregateInputType = {
    id?: true
    userId?: true
    tokenType?: true
    accessToken?: true
    refreshToken?: true
    accessTokenExpires?: true
    refreshTokenExpires?: true
    scope?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccessTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessToken to aggregate.
     */
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     */
    orderBy?: AccessTokenOrderByWithRelationInput | AccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AccessTokens
    **/
    _count?: true | AccessTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccessTokenAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccessTokenSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccessTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccessTokenMaxAggregateInputType
  }

  export type GetAccessTokenAggregateType<T extends AccessTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateAccessToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccessToken[P]>
      : GetScalarType<T[P], AggregateAccessToken[P]>
  }




  export type AccessTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccessTokenWhereInput
    orderBy?: AccessTokenOrderByWithAggregationInput | AccessTokenOrderByWithAggregationInput[]
    by: AccessTokenScalarFieldEnum[] | AccessTokenScalarFieldEnum
    having?: AccessTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccessTokenCountAggregateInputType | true
    _avg?: AccessTokenAvgAggregateInputType
    _sum?: AccessTokenSumAggregateInputType
    _min?: AccessTokenMinAggregateInputType
    _max?: AccessTokenMaxAggregateInputType
  }

  export type AccessTokenGroupByOutputType = {
    id: number
    userId: string
    tokenType: string
    accessToken: string
    refreshToken: string
    accessTokenExpires: Date
    refreshTokenExpires: Date
    scope: string
    createdAt: Date
    updatedAt: Date
    _count: AccessTokenCountAggregateOutputType | null
    _avg: AccessTokenAvgAggregateOutputType | null
    _sum: AccessTokenSumAggregateOutputType | null
    _min: AccessTokenMinAggregateOutputType | null
    _max: AccessTokenMaxAggregateOutputType | null
  }

  type GetAccessTokenGroupByPayload<T extends AccessTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccessTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccessTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
            : GetScalarType<T[P], AccessTokenGroupByOutputType[P]>
        }
      >
    >


  export type AccessTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    tokenType?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpires?: boolean
    refreshTokenExpires?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["accessToken"]>


  export type AccessTokenSelectScalar = {
    id?: boolean
    userId?: boolean
    tokenType?: boolean
    accessToken?: boolean
    refreshToken?: boolean
    accessTokenExpires?: boolean
    refreshTokenExpires?: boolean
    scope?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $AccessTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AccessToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: string
      tokenType: string
      accessToken: string
      refreshToken: string
      accessTokenExpires: Date
      refreshTokenExpires: Date
      scope: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["accessToken"]>
    composites: {}
  }

  type AccessTokenGetPayload<S extends boolean | null | undefined | AccessTokenDefaultArgs> = $Result.GetResult<Prisma.$AccessTokenPayload, S>

  type AccessTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccessTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccessTokenCountAggregateInputType | true
    }

  export interface AccessTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AccessToken'], meta: { name: 'AccessToken' } }
    /**
     * Find zero or one AccessToken that matches the filter.
     * @param {AccessTokenFindUniqueArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AccessTokenFindUniqueArgs>(args: SelectSubset<T, AccessTokenFindUniqueArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AccessToken that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AccessTokenFindUniqueOrThrowArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AccessTokenFindUniqueOrThrowArgs>(args: SelectSubset<T, AccessTokenFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AccessToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindFirstArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AccessTokenFindFirstArgs>(args?: SelectSubset<T, AccessTokenFindFirstArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AccessToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindFirstOrThrowArgs} args - Arguments to find a AccessToken
     * @example
     * // Get one AccessToken
     * const accessToken = await prisma.accessToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AccessTokenFindFirstOrThrowArgs>(args?: SelectSubset<T, AccessTokenFindFirstOrThrowArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AccessTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AccessTokens
     * const accessTokens = await prisma.accessToken.findMany()
     * 
     * // Get first 10 AccessTokens
     * const accessTokens = await prisma.accessToken.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accessTokenWithIdOnly = await prisma.accessToken.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AccessTokenFindManyArgs>(args?: SelectSubset<T, AccessTokenFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AccessToken.
     * @param {AccessTokenCreateArgs} args - Arguments to create a AccessToken.
     * @example
     * // Create one AccessToken
     * const AccessToken = await prisma.accessToken.create({
     *   data: {
     *     // ... data to create a AccessToken
     *   }
     * })
     * 
     */
    create<T extends AccessTokenCreateArgs>(args: SelectSubset<T, AccessTokenCreateArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AccessTokens.
     * @param {AccessTokenCreateManyArgs} args - Arguments to create many AccessTokens.
     * @example
     * // Create many AccessTokens
     * const accessToken = await prisma.accessToken.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AccessTokenCreateManyArgs>(args?: SelectSubset<T, AccessTokenCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AccessToken.
     * @param {AccessTokenDeleteArgs} args - Arguments to delete one AccessToken.
     * @example
     * // Delete one AccessToken
     * const AccessToken = await prisma.accessToken.delete({
     *   where: {
     *     // ... filter to delete one AccessToken
     *   }
     * })
     * 
     */
    delete<T extends AccessTokenDeleteArgs>(args: SelectSubset<T, AccessTokenDeleteArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AccessToken.
     * @param {AccessTokenUpdateArgs} args - Arguments to update one AccessToken.
     * @example
     * // Update one AccessToken
     * const accessToken = await prisma.accessToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AccessTokenUpdateArgs>(args: SelectSubset<T, AccessTokenUpdateArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AccessTokens.
     * @param {AccessTokenDeleteManyArgs} args - Arguments to filter AccessTokens to delete.
     * @example
     * // Delete a few AccessTokens
     * const { count } = await prisma.accessToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AccessTokenDeleteManyArgs>(args?: SelectSubset<T, AccessTokenDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AccessTokens
     * const accessToken = await prisma.accessToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AccessTokenUpdateManyArgs>(args: SelectSubset<T, AccessTokenUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AccessToken.
     * @param {AccessTokenUpsertArgs} args - Arguments to update or create a AccessToken.
     * @example
     * // Update or create a AccessToken
     * const accessToken = await prisma.accessToken.upsert({
     *   create: {
     *     // ... data to create a AccessToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AccessToken we want to update
     *   }
     * })
     */
    upsert<T extends AccessTokenUpsertArgs>(args: SelectSubset<T, AccessTokenUpsertArgs<ExtArgs>>): Prisma__AccessTokenClient<$Result.GetResult<Prisma.$AccessTokenPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AccessTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenCountArgs} args - Arguments to filter AccessTokens to count.
     * @example
     * // Count the number of AccessTokens
     * const count = await prisma.accessToken.count({
     *   where: {
     *     // ... the filter for the AccessTokens we want to count
     *   }
     * })
    **/
    count<T extends AccessTokenCountArgs>(
      args?: Subset<T, AccessTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccessTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccessTokenAggregateArgs>(args: Subset<T, AccessTokenAggregateArgs>): Prisma.PrismaPromise<GetAccessTokenAggregateType<T>>

    /**
     * Group by AccessToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccessTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccessTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccessTokenGroupByArgs['orderBy'] }
        : { orderBy?: AccessTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccessTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccessTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AccessToken model
   */
  readonly fields: AccessTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AccessToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccessTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AccessToken model
   */ 
  interface AccessTokenFieldRefs {
    readonly id: FieldRef<"AccessToken", 'Int'>
    readonly userId: FieldRef<"AccessToken", 'String'>
    readonly tokenType: FieldRef<"AccessToken", 'String'>
    readonly accessToken: FieldRef<"AccessToken", 'String'>
    readonly refreshToken: FieldRef<"AccessToken", 'String'>
    readonly accessTokenExpires: FieldRef<"AccessToken", 'DateTime'>
    readonly refreshTokenExpires: FieldRef<"AccessToken", 'DateTime'>
    readonly scope: FieldRef<"AccessToken", 'String'>
    readonly createdAt: FieldRef<"AccessToken", 'DateTime'>
    readonly updatedAt: FieldRef<"AccessToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AccessToken findUnique
   */
  export type AccessTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter, which AccessToken to fetch.
     */
    where: AccessTokenWhereUniqueInput
  }

  /**
   * AccessToken findUniqueOrThrow
   */
  export type AccessTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter, which AccessToken to fetch.
     */
    where: AccessTokenWhereUniqueInput
  }

  /**
   * AccessToken findFirst
   */
  export type AccessTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter, which AccessToken to fetch.
     */
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     */
    orderBy?: AccessTokenOrderByWithRelationInput | AccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessTokens.
     */
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessTokens.
     */
    distinct?: AccessTokenScalarFieldEnum | AccessTokenScalarFieldEnum[]
  }

  /**
   * AccessToken findFirstOrThrow
   */
  export type AccessTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter, which AccessToken to fetch.
     */
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     */
    orderBy?: AccessTokenOrderByWithRelationInput | AccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AccessTokens.
     */
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AccessTokens.
     */
    distinct?: AccessTokenScalarFieldEnum | AccessTokenScalarFieldEnum[]
  }

  /**
   * AccessToken findMany
   */
  export type AccessTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter, which AccessTokens to fetch.
     */
    where?: AccessTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AccessTokens to fetch.
     */
    orderBy?: AccessTokenOrderByWithRelationInput | AccessTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AccessTokens.
     */
    cursor?: AccessTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AccessTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AccessTokens.
     */
    skip?: number
    distinct?: AccessTokenScalarFieldEnum | AccessTokenScalarFieldEnum[]
  }

  /**
   * AccessToken create
   */
  export type AccessTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a AccessToken.
     */
    data: XOR<AccessTokenCreateInput, AccessTokenUncheckedCreateInput>
  }

  /**
   * AccessToken createMany
   */
  export type AccessTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AccessTokens.
     */
    data: AccessTokenCreateManyInput | AccessTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AccessToken update
   */
  export type AccessTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a AccessToken.
     */
    data: XOR<AccessTokenUpdateInput, AccessTokenUncheckedUpdateInput>
    /**
     * Choose, which AccessToken to update.
     */
    where: AccessTokenWhereUniqueInput
  }

  /**
   * AccessToken updateMany
   */
  export type AccessTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AccessTokens.
     */
    data: XOR<AccessTokenUpdateManyMutationInput, AccessTokenUncheckedUpdateManyInput>
    /**
     * Filter which AccessTokens to update
     */
    where?: AccessTokenWhereInput
  }

  /**
   * AccessToken upsert
   */
  export type AccessTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the AccessToken to update in case it exists.
     */
    where: AccessTokenWhereUniqueInput
    /**
     * In case the AccessToken found by the `where` argument doesn't exist, create a new AccessToken with this data.
     */
    create: XOR<AccessTokenCreateInput, AccessTokenUncheckedCreateInput>
    /**
     * In case the AccessToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccessTokenUpdateInput, AccessTokenUncheckedUpdateInput>
  }

  /**
   * AccessToken delete
   */
  export type AccessTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
    /**
     * Filter which AccessToken to delete.
     */
    where: AccessTokenWhereUniqueInput
  }

  /**
   * AccessToken deleteMany
   */
  export type AccessTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AccessTokens to delete
     */
    where?: AccessTokenWhereInput
  }

  /**
   * AccessToken without action
   */
  export type AccessTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccessToken
     */
    select?: AccessTokenSelect<ExtArgs> | null
  }


  /**
   * Model CodeChallenge
   */

  export type AggregateCodeChallenge = {
    _count: CodeChallengeCountAggregateOutputType | null
    _min: CodeChallengeMinAggregateOutputType | null
    _max: CodeChallengeMaxAggregateOutputType | null
  }

  export type CodeChallengeMinAggregateOutputType = {
    challenge: string | null
    challengeVerifier: string | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodeChallengeMaxAggregateOutputType = {
    challenge: string | null
    challengeVerifier: string | null
    state: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CodeChallengeCountAggregateOutputType = {
    challenge: number
    challengeVerifier: number
    state: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CodeChallengeMinAggregateInputType = {
    challenge?: true
    challengeVerifier?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodeChallengeMaxAggregateInputType = {
    challenge?: true
    challengeVerifier?: true
    state?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CodeChallengeCountAggregateInputType = {
    challenge?: true
    challengeVerifier?: true
    state?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CodeChallengeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodeChallenge to aggregate.
     */
    where?: CodeChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeChallenges to fetch.
     */
    orderBy?: CodeChallengeOrderByWithRelationInput | CodeChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CodeChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CodeChallenges
    **/
    _count?: true | CodeChallengeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CodeChallengeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CodeChallengeMaxAggregateInputType
  }

  export type GetCodeChallengeAggregateType<T extends CodeChallengeAggregateArgs> = {
        [P in keyof T & keyof AggregateCodeChallenge]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCodeChallenge[P]>
      : GetScalarType<T[P], AggregateCodeChallenge[P]>
  }




  export type CodeChallengeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CodeChallengeWhereInput
    orderBy?: CodeChallengeOrderByWithAggregationInput | CodeChallengeOrderByWithAggregationInput[]
    by: CodeChallengeScalarFieldEnum[] | CodeChallengeScalarFieldEnum
    having?: CodeChallengeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CodeChallengeCountAggregateInputType | true
    _min?: CodeChallengeMinAggregateInputType
    _max?: CodeChallengeMaxAggregateInputType
  }

  export type CodeChallengeGroupByOutputType = {
    challenge: string
    challengeVerifier: string
    state: string
    createdAt: Date
    updatedAt: Date
    _count: CodeChallengeCountAggregateOutputType | null
    _min: CodeChallengeMinAggregateOutputType | null
    _max: CodeChallengeMaxAggregateOutputType | null
  }

  type GetCodeChallengeGroupByPayload<T extends CodeChallengeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CodeChallengeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CodeChallengeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CodeChallengeGroupByOutputType[P]>
            : GetScalarType<T[P], CodeChallengeGroupByOutputType[P]>
        }
      >
    >


  export type CodeChallengeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    challenge?: boolean
    challengeVerifier?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["codeChallenge"]>


  export type CodeChallengeSelectScalar = {
    challenge?: boolean
    challengeVerifier?: boolean
    state?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }


  export type $CodeChallengePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CodeChallenge"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      challenge: string
      challengeVerifier: string
      state: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["codeChallenge"]>
    composites: {}
  }

  type CodeChallengeGetPayload<S extends boolean | null | undefined | CodeChallengeDefaultArgs> = $Result.GetResult<Prisma.$CodeChallengePayload, S>

  type CodeChallengeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CodeChallengeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CodeChallengeCountAggregateInputType | true
    }

  export interface CodeChallengeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CodeChallenge'], meta: { name: 'CodeChallenge' } }
    /**
     * Find zero or one CodeChallenge that matches the filter.
     * @param {CodeChallengeFindUniqueArgs} args - Arguments to find a CodeChallenge
     * @example
     * // Get one CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CodeChallengeFindUniqueArgs>(args: SelectSubset<T, CodeChallengeFindUniqueArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CodeChallenge that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CodeChallengeFindUniqueOrThrowArgs} args - Arguments to find a CodeChallenge
     * @example
     * // Get one CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CodeChallengeFindUniqueOrThrowArgs>(args: SelectSubset<T, CodeChallengeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CodeChallenge that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeFindFirstArgs} args - Arguments to find a CodeChallenge
     * @example
     * // Get one CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CodeChallengeFindFirstArgs>(args?: SelectSubset<T, CodeChallengeFindFirstArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CodeChallenge that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeFindFirstOrThrowArgs} args - Arguments to find a CodeChallenge
     * @example
     * // Get one CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CodeChallengeFindFirstOrThrowArgs>(args?: SelectSubset<T, CodeChallengeFindFirstOrThrowArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CodeChallenges that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CodeChallenges
     * const codeChallenges = await prisma.codeChallenge.findMany()
     * 
     * // Get first 10 CodeChallenges
     * const codeChallenges = await prisma.codeChallenge.findMany({ take: 10 })
     * 
     * // Only select the `challenge`
     * const codeChallengeWithChallengeOnly = await prisma.codeChallenge.findMany({ select: { challenge: true } })
     * 
     */
    findMany<T extends CodeChallengeFindManyArgs>(args?: SelectSubset<T, CodeChallengeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CodeChallenge.
     * @param {CodeChallengeCreateArgs} args - Arguments to create a CodeChallenge.
     * @example
     * // Create one CodeChallenge
     * const CodeChallenge = await prisma.codeChallenge.create({
     *   data: {
     *     // ... data to create a CodeChallenge
     *   }
     * })
     * 
     */
    create<T extends CodeChallengeCreateArgs>(args: SelectSubset<T, CodeChallengeCreateArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CodeChallenges.
     * @param {CodeChallengeCreateManyArgs} args - Arguments to create many CodeChallenges.
     * @example
     * // Create many CodeChallenges
     * const codeChallenge = await prisma.codeChallenge.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CodeChallengeCreateManyArgs>(args?: SelectSubset<T, CodeChallengeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CodeChallenge.
     * @param {CodeChallengeDeleteArgs} args - Arguments to delete one CodeChallenge.
     * @example
     * // Delete one CodeChallenge
     * const CodeChallenge = await prisma.codeChallenge.delete({
     *   where: {
     *     // ... filter to delete one CodeChallenge
     *   }
     * })
     * 
     */
    delete<T extends CodeChallengeDeleteArgs>(args: SelectSubset<T, CodeChallengeDeleteArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CodeChallenge.
     * @param {CodeChallengeUpdateArgs} args - Arguments to update one CodeChallenge.
     * @example
     * // Update one CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CodeChallengeUpdateArgs>(args: SelectSubset<T, CodeChallengeUpdateArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CodeChallenges.
     * @param {CodeChallengeDeleteManyArgs} args - Arguments to filter CodeChallenges to delete.
     * @example
     * // Delete a few CodeChallenges
     * const { count } = await prisma.codeChallenge.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CodeChallengeDeleteManyArgs>(args?: SelectSubset<T, CodeChallengeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CodeChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CodeChallenges
     * const codeChallenge = await prisma.codeChallenge.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CodeChallengeUpdateManyArgs>(args: SelectSubset<T, CodeChallengeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CodeChallenge.
     * @param {CodeChallengeUpsertArgs} args - Arguments to update or create a CodeChallenge.
     * @example
     * // Update or create a CodeChallenge
     * const codeChallenge = await prisma.codeChallenge.upsert({
     *   create: {
     *     // ... data to create a CodeChallenge
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CodeChallenge we want to update
     *   }
     * })
     */
    upsert<T extends CodeChallengeUpsertArgs>(args: SelectSubset<T, CodeChallengeUpsertArgs<ExtArgs>>): Prisma__CodeChallengeClient<$Result.GetResult<Prisma.$CodeChallengePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CodeChallenges.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeCountArgs} args - Arguments to filter CodeChallenges to count.
     * @example
     * // Count the number of CodeChallenges
     * const count = await prisma.codeChallenge.count({
     *   where: {
     *     // ... the filter for the CodeChallenges we want to count
     *   }
     * })
    **/
    count<T extends CodeChallengeCountArgs>(
      args?: Subset<T, CodeChallengeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CodeChallengeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CodeChallenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CodeChallengeAggregateArgs>(args: Subset<T, CodeChallengeAggregateArgs>): Prisma.PrismaPromise<GetCodeChallengeAggregateType<T>>

    /**
     * Group by CodeChallenge.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CodeChallengeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CodeChallengeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CodeChallengeGroupByArgs['orderBy'] }
        : { orderBy?: CodeChallengeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CodeChallengeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCodeChallengeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CodeChallenge model
   */
  readonly fields: CodeChallengeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CodeChallenge.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CodeChallengeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CodeChallenge model
   */ 
  interface CodeChallengeFieldRefs {
    readonly challenge: FieldRef<"CodeChallenge", 'String'>
    readonly challengeVerifier: FieldRef<"CodeChallenge", 'String'>
    readonly state: FieldRef<"CodeChallenge", 'String'>
    readonly createdAt: FieldRef<"CodeChallenge", 'DateTime'>
    readonly updatedAt: FieldRef<"CodeChallenge", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CodeChallenge findUnique
   */
  export type CodeChallengeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter, which CodeChallenge to fetch.
     */
    where: CodeChallengeWhereUniqueInput
  }

  /**
   * CodeChallenge findUniqueOrThrow
   */
  export type CodeChallengeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter, which CodeChallenge to fetch.
     */
    where: CodeChallengeWhereUniqueInput
  }

  /**
   * CodeChallenge findFirst
   */
  export type CodeChallengeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter, which CodeChallenge to fetch.
     */
    where?: CodeChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeChallenges to fetch.
     */
    orderBy?: CodeChallengeOrderByWithRelationInput | CodeChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodeChallenges.
     */
    cursor?: CodeChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodeChallenges.
     */
    distinct?: CodeChallengeScalarFieldEnum | CodeChallengeScalarFieldEnum[]
  }

  /**
   * CodeChallenge findFirstOrThrow
   */
  export type CodeChallengeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter, which CodeChallenge to fetch.
     */
    where?: CodeChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeChallenges to fetch.
     */
    orderBy?: CodeChallengeOrderByWithRelationInput | CodeChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CodeChallenges.
     */
    cursor?: CodeChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeChallenges.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CodeChallenges.
     */
    distinct?: CodeChallengeScalarFieldEnum | CodeChallengeScalarFieldEnum[]
  }

  /**
   * CodeChallenge findMany
   */
  export type CodeChallengeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter, which CodeChallenges to fetch.
     */
    where?: CodeChallengeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CodeChallenges to fetch.
     */
    orderBy?: CodeChallengeOrderByWithRelationInput | CodeChallengeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CodeChallenges.
     */
    cursor?: CodeChallengeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CodeChallenges from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CodeChallenges.
     */
    skip?: number
    distinct?: CodeChallengeScalarFieldEnum | CodeChallengeScalarFieldEnum[]
  }

  /**
   * CodeChallenge create
   */
  export type CodeChallengeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * The data needed to create a CodeChallenge.
     */
    data: XOR<CodeChallengeCreateInput, CodeChallengeUncheckedCreateInput>
  }

  /**
   * CodeChallenge createMany
   */
  export type CodeChallengeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CodeChallenges.
     */
    data: CodeChallengeCreateManyInput | CodeChallengeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CodeChallenge update
   */
  export type CodeChallengeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * The data needed to update a CodeChallenge.
     */
    data: XOR<CodeChallengeUpdateInput, CodeChallengeUncheckedUpdateInput>
    /**
     * Choose, which CodeChallenge to update.
     */
    where: CodeChallengeWhereUniqueInput
  }

  /**
   * CodeChallenge updateMany
   */
  export type CodeChallengeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CodeChallenges.
     */
    data: XOR<CodeChallengeUpdateManyMutationInput, CodeChallengeUncheckedUpdateManyInput>
    /**
     * Filter which CodeChallenges to update
     */
    where?: CodeChallengeWhereInput
  }

  /**
   * CodeChallenge upsert
   */
  export type CodeChallengeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * The filter to search for the CodeChallenge to update in case it exists.
     */
    where: CodeChallengeWhereUniqueInput
    /**
     * In case the CodeChallenge found by the `where` argument doesn't exist, create a new CodeChallenge with this data.
     */
    create: XOR<CodeChallengeCreateInput, CodeChallengeUncheckedCreateInput>
    /**
     * In case the CodeChallenge was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CodeChallengeUpdateInput, CodeChallengeUncheckedUpdateInput>
  }

  /**
   * CodeChallenge delete
   */
  export type CodeChallengeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
    /**
     * Filter which CodeChallenge to delete.
     */
    where: CodeChallengeWhereUniqueInput
  }

  /**
   * CodeChallenge deleteMany
   */
  export type CodeChallengeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CodeChallenges to delete
     */
    where?: CodeChallengeWhereInput
  }

  /**
   * CodeChallenge without action
   */
  export type CodeChallengeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CodeChallenge
     */
    select?: CodeChallengeSelect<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BeaconUserScalarFieldEnum: {
    userId: 'userId',
    username: 'username',
    usernameFull: 'usernameFull',
    isAnonymous: 'isAnonymous',
    publicKey: 'publicKey',
    privateKey: 'privateKey',
    cloudKey: 'cloudKey',
    banned: 'banned',
    accessTokenId: 'accessTokenId',
    guildIds: 'guildIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BeaconUserScalarFieldEnum = (typeof BeaconUserScalarFieldEnum)[keyof typeof BeaconUserScalarFieldEnum]


  export const AccessTokenScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tokenType: 'tokenType',
    accessToken: 'accessToken',
    refreshToken: 'refreshToken',
    accessTokenExpires: 'accessTokenExpires',
    refreshTokenExpires: 'refreshTokenExpires',
    scope: 'scope',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccessTokenScalarFieldEnum = (typeof AccessTokenScalarFieldEnum)[keyof typeof AccessTokenScalarFieldEnum]


  export const CodeChallengeScalarFieldEnum: {
    challenge: 'challenge',
    challengeVerifier: 'challengeVerifier',
    state: 'state',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CodeChallengeScalarFieldEnum = (typeof CodeChallengeScalarFieldEnum)[keyof typeof CodeChallengeScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type BeaconUserWhereInput = {
    AND?: BeaconUserWhereInput | BeaconUserWhereInput[]
    OR?: BeaconUserWhereInput[]
    NOT?: BeaconUserWhereInput | BeaconUserWhereInput[]
    userId?: StringFilter<"BeaconUser"> | string
    username?: StringFilter<"BeaconUser"> | string
    usernameFull?: StringFilter<"BeaconUser"> | string
    isAnonymous?: BoolFilter<"BeaconUser"> | boolean
    publicKey?: StringFilter<"BeaconUser"> | string
    privateKey?: JsonFilter<"BeaconUser">
    cloudKey?: StringFilter<"BeaconUser"> | string
    banned?: BoolFilter<"BeaconUser"> | boolean
    accessTokenId?: IntFilter<"BeaconUser"> | number
    guildIds?: JsonFilter<"BeaconUser">
    createdAt?: DateTimeFilter<"BeaconUser"> | Date | string
    updatedAt?: DateTimeFilter<"BeaconUser"> | Date | string
  }

  export type BeaconUserOrderByWithRelationInput = {
    userId?: SortOrder
    username?: SortOrder
    usernameFull?: SortOrder
    isAnonymous?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    cloudKey?: SortOrder
    banned?: SortOrder
    accessTokenId?: SortOrder
    guildIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeaconUserWhereUniqueInput = Prisma.AtLeast<{
    userId?: string
    AND?: BeaconUserWhereInput | BeaconUserWhereInput[]
    OR?: BeaconUserWhereInput[]
    NOT?: BeaconUserWhereInput | BeaconUserWhereInput[]
    username?: StringFilter<"BeaconUser"> | string
    usernameFull?: StringFilter<"BeaconUser"> | string
    isAnonymous?: BoolFilter<"BeaconUser"> | boolean
    publicKey?: StringFilter<"BeaconUser"> | string
    privateKey?: JsonFilter<"BeaconUser">
    cloudKey?: StringFilter<"BeaconUser"> | string
    banned?: BoolFilter<"BeaconUser"> | boolean
    accessTokenId?: IntFilter<"BeaconUser"> | number
    guildIds?: JsonFilter<"BeaconUser">
    createdAt?: DateTimeFilter<"BeaconUser"> | Date | string
    updatedAt?: DateTimeFilter<"BeaconUser"> | Date | string
  }, "userId">

  export type BeaconUserOrderByWithAggregationInput = {
    userId?: SortOrder
    username?: SortOrder
    usernameFull?: SortOrder
    isAnonymous?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    cloudKey?: SortOrder
    banned?: SortOrder
    accessTokenId?: SortOrder
    guildIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BeaconUserCountOrderByAggregateInput
    _avg?: BeaconUserAvgOrderByAggregateInput
    _max?: BeaconUserMaxOrderByAggregateInput
    _min?: BeaconUserMinOrderByAggregateInput
    _sum?: BeaconUserSumOrderByAggregateInput
  }

  export type BeaconUserScalarWhereWithAggregatesInput = {
    AND?: BeaconUserScalarWhereWithAggregatesInput | BeaconUserScalarWhereWithAggregatesInput[]
    OR?: BeaconUserScalarWhereWithAggregatesInput[]
    NOT?: BeaconUserScalarWhereWithAggregatesInput | BeaconUserScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"BeaconUser"> | string
    username?: StringWithAggregatesFilter<"BeaconUser"> | string
    usernameFull?: StringWithAggregatesFilter<"BeaconUser"> | string
    isAnonymous?: BoolWithAggregatesFilter<"BeaconUser"> | boolean
    publicKey?: StringWithAggregatesFilter<"BeaconUser"> | string
    privateKey?: JsonWithAggregatesFilter<"BeaconUser">
    cloudKey?: StringWithAggregatesFilter<"BeaconUser"> | string
    banned?: BoolWithAggregatesFilter<"BeaconUser"> | boolean
    accessTokenId?: IntWithAggregatesFilter<"BeaconUser"> | number
    guildIds?: JsonWithAggregatesFilter<"BeaconUser">
    createdAt?: DateTimeWithAggregatesFilter<"BeaconUser"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BeaconUser"> | Date | string
  }

  export type AccessTokenWhereInput = {
    AND?: AccessTokenWhereInput | AccessTokenWhereInput[]
    OR?: AccessTokenWhereInput[]
    NOT?: AccessTokenWhereInput | AccessTokenWhereInput[]
    id?: IntFilter<"AccessToken"> | number
    userId?: StringFilter<"AccessToken"> | string
    tokenType?: StringFilter<"AccessToken"> | string
    accessToken?: StringFilter<"AccessToken"> | string
    refreshToken?: StringFilter<"AccessToken"> | string
    accessTokenExpires?: DateTimeFilter<"AccessToken"> | Date | string
    refreshTokenExpires?: DateTimeFilter<"AccessToken"> | Date | string
    scope?: StringFilter<"AccessToken"> | string
    createdAt?: DateTimeFilter<"AccessToken"> | Date | string
    updatedAt?: DateTimeFilter<"AccessToken"> | Date | string
  }

  export type AccessTokenOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshTokenExpires?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccessTokenWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    userId?: string
    accessToken?: string
    refreshToken?: string
    AND?: AccessTokenWhereInput | AccessTokenWhereInput[]
    OR?: AccessTokenWhereInput[]
    NOT?: AccessTokenWhereInput | AccessTokenWhereInput[]
    tokenType?: StringFilter<"AccessToken"> | string
    accessTokenExpires?: DateTimeFilter<"AccessToken"> | Date | string
    refreshTokenExpires?: DateTimeFilter<"AccessToken"> | Date | string
    scope?: StringFilter<"AccessToken"> | string
    createdAt?: DateTimeFilter<"AccessToken"> | Date | string
    updatedAt?: DateTimeFilter<"AccessToken"> | Date | string
  }, "id" | "userId" | "accessToken" | "refreshToken">

  export type AccessTokenOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshTokenExpires?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccessTokenCountOrderByAggregateInput
    _avg?: AccessTokenAvgOrderByAggregateInput
    _max?: AccessTokenMaxOrderByAggregateInput
    _min?: AccessTokenMinOrderByAggregateInput
    _sum?: AccessTokenSumOrderByAggregateInput
  }

  export type AccessTokenScalarWhereWithAggregatesInput = {
    AND?: AccessTokenScalarWhereWithAggregatesInput | AccessTokenScalarWhereWithAggregatesInput[]
    OR?: AccessTokenScalarWhereWithAggregatesInput[]
    NOT?: AccessTokenScalarWhereWithAggregatesInput | AccessTokenScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AccessToken"> | number
    userId?: StringWithAggregatesFilter<"AccessToken"> | string
    tokenType?: StringWithAggregatesFilter<"AccessToken"> | string
    accessToken?: StringWithAggregatesFilter<"AccessToken"> | string
    refreshToken?: StringWithAggregatesFilter<"AccessToken"> | string
    accessTokenExpires?: DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
    refreshTokenExpires?: DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
    scope?: StringWithAggregatesFilter<"AccessToken"> | string
    createdAt?: DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AccessToken"> | Date | string
  }

  export type CodeChallengeWhereInput = {
    AND?: CodeChallengeWhereInput | CodeChallengeWhereInput[]
    OR?: CodeChallengeWhereInput[]
    NOT?: CodeChallengeWhereInput | CodeChallengeWhereInput[]
    challenge?: StringFilter<"CodeChallenge"> | string
    challengeVerifier?: StringFilter<"CodeChallenge"> | string
    state?: StringFilter<"CodeChallenge"> | string
    createdAt?: DateTimeFilter<"CodeChallenge"> | Date | string
    updatedAt?: DateTimeFilter<"CodeChallenge"> | Date | string
  }

  export type CodeChallengeOrderByWithRelationInput = {
    challenge?: SortOrder
    challengeVerifier?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodeChallengeWhereUniqueInput = Prisma.AtLeast<{
    challenge?: string
    challengeVerifier?: string
    state?: string
    AND?: CodeChallengeWhereInput | CodeChallengeWhereInput[]
    OR?: CodeChallengeWhereInput[]
    NOT?: CodeChallengeWhereInput | CodeChallengeWhereInput[]
    createdAt?: DateTimeFilter<"CodeChallenge"> | Date | string
    updatedAt?: DateTimeFilter<"CodeChallenge"> | Date | string
  }, "challenge" | "challengeVerifier" | "state">

  export type CodeChallengeOrderByWithAggregationInput = {
    challenge?: SortOrder
    challengeVerifier?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CodeChallengeCountOrderByAggregateInput
    _max?: CodeChallengeMaxOrderByAggregateInput
    _min?: CodeChallengeMinOrderByAggregateInput
  }

  export type CodeChallengeScalarWhereWithAggregatesInput = {
    AND?: CodeChallengeScalarWhereWithAggregatesInput | CodeChallengeScalarWhereWithAggregatesInput[]
    OR?: CodeChallengeScalarWhereWithAggregatesInput[]
    NOT?: CodeChallengeScalarWhereWithAggregatesInput | CodeChallengeScalarWhereWithAggregatesInput[]
    challenge?: StringWithAggregatesFilter<"CodeChallenge"> | string
    challengeVerifier?: StringWithAggregatesFilter<"CodeChallenge"> | string
    state?: StringWithAggregatesFilter<"CodeChallenge"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CodeChallenge"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"CodeChallenge"> | Date | string
  }

  export type BeaconUserCreateInput = {
    userId: string
    username: string
    usernameFull: string
    isAnonymous: boolean
    publicKey: string
    privateKey: JsonNullValueInput | InputJsonValue
    cloudKey: string
    banned: boolean
    accessTokenId: number
    guildIds: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeaconUserUncheckedCreateInput = {
    userId: string
    username: string
    usernameFull: string
    isAnonymous: boolean
    publicKey: string
    privateKey: JsonNullValueInput | InputJsonValue
    cloudKey: string
    banned: boolean
    accessTokenId: number
    guildIds: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeaconUserUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    usernameFull?: StringFieldUpdateOperationsInput | string
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    publicKey?: StringFieldUpdateOperationsInput | string
    privateKey?: JsonNullValueInput | InputJsonValue
    cloudKey?: StringFieldUpdateOperationsInput | string
    banned?: BoolFieldUpdateOperationsInput | boolean
    accessTokenId?: IntFieldUpdateOperationsInput | number
    guildIds?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeaconUserUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    usernameFull?: StringFieldUpdateOperationsInput | string
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    publicKey?: StringFieldUpdateOperationsInput | string
    privateKey?: JsonNullValueInput | InputJsonValue
    cloudKey?: StringFieldUpdateOperationsInput | string
    banned?: BoolFieldUpdateOperationsInput | boolean
    accessTokenId?: IntFieldUpdateOperationsInput | number
    guildIds?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeaconUserCreateManyInput = {
    userId: string
    username: string
    usernameFull: string
    isAnonymous: boolean
    publicKey: string
    privateKey: JsonNullValueInput | InputJsonValue
    cloudKey: string
    banned: boolean
    accessTokenId: number
    guildIds: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BeaconUserUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    usernameFull?: StringFieldUpdateOperationsInput | string
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    publicKey?: StringFieldUpdateOperationsInput | string
    privateKey?: JsonNullValueInput | InputJsonValue
    cloudKey?: StringFieldUpdateOperationsInput | string
    banned?: BoolFieldUpdateOperationsInput | boolean
    accessTokenId?: IntFieldUpdateOperationsInput | number
    guildIds?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BeaconUserUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    usernameFull?: StringFieldUpdateOperationsInput | string
    isAnonymous?: BoolFieldUpdateOperationsInput | boolean
    publicKey?: StringFieldUpdateOperationsInput | string
    privateKey?: JsonNullValueInput | InputJsonValue
    cloudKey?: StringFieldUpdateOperationsInput | string
    banned?: BoolFieldUpdateOperationsInput | boolean
    accessTokenId?: IntFieldUpdateOperationsInput | number
    guildIds?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTokenCreateInput = {
    userId: string
    tokenType: string
    accessToken: string
    refreshToken: string
    accessTokenExpires: Date | string
    refreshTokenExpires: Date | string
    scope: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccessTokenUncheckedCreateInput = {
    id?: number
    userId: string
    tokenType: string
    accessToken: string
    refreshToken: string
    accessTokenExpires: Date | string
    refreshTokenExpires: Date | string
    scope: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccessTokenUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTokenUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTokenCreateManyInput = {
    id?: number
    userId: string
    tokenType: string
    accessToken: string
    refreshToken: string
    accessTokenExpires: Date | string
    refreshTokenExpires: Date | string
    scope: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccessTokenUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccessTokenUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
    tokenType?: StringFieldUpdateOperationsInput | string
    accessToken?: StringFieldUpdateOperationsInput | string
    refreshToken?: StringFieldUpdateOperationsInput | string
    accessTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    refreshTokenExpires?: DateTimeFieldUpdateOperationsInput | Date | string
    scope?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeChallengeCreateInput = {
    challenge: string
    challengeVerifier: string
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodeChallengeUncheckedCreateInput = {
    challenge: string
    challengeVerifier: string
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodeChallengeUpdateInput = {
    challenge?: StringFieldUpdateOperationsInput | string
    challengeVerifier?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeChallengeUncheckedUpdateInput = {
    challenge?: StringFieldUpdateOperationsInput | string
    challengeVerifier?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeChallengeCreateManyInput = {
    challenge: string
    challengeVerifier: string
    state: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CodeChallengeUpdateManyMutationInput = {
    challenge?: StringFieldUpdateOperationsInput | string
    challengeVerifier?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CodeChallengeUncheckedUpdateManyInput = {
    challenge?: StringFieldUpdateOperationsInput | string
    challengeVerifier?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BeaconUserCountOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    usernameFull?: SortOrder
    isAnonymous?: SortOrder
    publicKey?: SortOrder
    privateKey?: SortOrder
    cloudKey?: SortOrder
    banned?: SortOrder
    accessTokenId?: SortOrder
    guildIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeaconUserAvgOrderByAggregateInput = {
    accessTokenId?: SortOrder
  }

  export type BeaconUserMaxOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    usernameFull?: SortOrder
    isAnonymous?: SortOrder
    publicKey?: SortOrder
    cloudKey?: SortOrder
    banned?: SortOrder
    accessTokenId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeaconUserMinOrderByAggregateInput = {
    userId?: SortOrder
    username?: SortOrder
    usernameFull?: SortOrder
    isAnonymous?: SortOrder
    publicKey?: SortOrder
    cloudKey?: SortOrder
    banned?: SortOrder
    accessTokenId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BeaconUserSumOrderByAggregateInput = {
    accessTokenId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type AccessTokenCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshTokenExpires?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccessTokenAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccessTokenMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshTokenExpires?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccessTokenMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tokenType?: SortOrder
    accessToken?: SortOrder
    refreshToken?: SortOrder
    accessTokenExpires?: SortOrder
    refreshTokenExpires?: SortOrder
    scope?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccessTokenSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CodeChallengeCountOrderByAggregateInput = {
    challenge?: SortOrder
    challengeVerifier?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodeChallengeMaxOrderByAggregateInput = {
    challenge?: SortOrder
    challengeVerifier?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CodeChallengeMinOrderByAggregateInput = {
    challenge?: SortOrder
    challengeVerifier?: SortOrder
    state?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BeaconUserDefaultArgs instead
     */
    export type BeaconUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BeaconUserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccessTokenDefaultArgs instead
     */
    export type AccessTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccessTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CodeChallengeDefaultArgs instead
     */
    export type CodeChallengeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CodeChallengeDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}